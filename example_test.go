// Copyright 2014 The presenti Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
)

func ExampleDo() {
	input := "example/good.go"
	err := do(input)
	if err != nil {
		fmt.Println("ExampleDo err:", err)
	}
	// Output:
	//# DO NOT EDIT GENERATED by presenti
	//A Good presenti Example
	//
	//The presenti Authors
	//https://www.github.com/dupoxy/presenti/
	//
	//* Title of slide or section (must have asterisk)
	//Some Text
	//** Subsection
	//- bullets
	//- more bullets
	//- a bullet with
	//*** Sub-subsection
	//Some More text
	//	Preformatted text
	//	is indented (however you like)
	//Further Text, including invocations like:
	//.code good.go /^func main/,/^}/
	//.play good.go
	//# .image image.jpg
	//# .iframe http://foo
}

func ExampleDo_eof() {
	input := "example/eof/good.go"
	err := do(input)
	if err != nil {
		fmt.Println("error")
	}
	// Output:
	//# DO NOT EDIT GENERATED by presenti
	// A Good presenti Example
	//
	// The presenti Authors
	// https://www.github.com/dupoxy/presenti/
	//
	// * Bla bla
	// * Bla bla

}

func ExampleDo_badnonewline() {
	input := "example/badnonewline/bad.go"
	err := do(input)
	if err != nil {
		fmt.Println("error")
	}
	// Output:
	//# DO NOT EDIT GENERATED by presenti
	// A Bad presenti Example
	//
	// The presenti Authors
	// https://www.github.com/dupoxy/presenti/
	//
	// * Bla bla
	// * Bla bla

}

func ExampleDo_badnotoplev() {
	input := "example/badnotoplev/bad.go"
	err := do(input)
	if err != nil {
		fmt.Println("error")
	}
	// Output:
	//# DO NOT EDIT GENERATED by presenti
	// A Bad presenti Example
	//
	// The presenti Authors
	// https://www.github.com/dupoxy/presenti/
	//
	// * Bla bla
	// * Bla bla

}

func ExampleNewFilteredNote_Bad() {
	s := `
/* I m just /* bad
*/
`
	_, err := newFilteredNote(s)
	if err == nil {
		fmt.Println("ho ho")
	}
	if err != nil {
		fmt.Println("error that good")
	}
	// Output:
	// error that good
}

func ExampleNewFilteredNote_Bad2() {
	s := `
/* I m just */ bad
*/
`
	_, err := newFilteredNote(s)
	if err == nil {
		fmt.Println("ho ho")
	}
	if err != nil {
		fmt.Println("error that good")
	}
	// Output:
	// error that good
}
